const PDFDocument = require('pdfkit');
const { DOMImplementation, XMLSerializer } = require('xmldom');
const SVGtoPDF = require('svg-to-pdfkit');

/**
 * Generates a PDF with barcodes from the provided data
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.generateBarcodePDF = async (req, res) => {
  try {
    // Extract data from request body
    const { data, filename } = req.body;
    
    if (!data || !data.receipt_id || !data.consignment_id || !data.box_id) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing required data. Need receipt_id, consignment_id, and box_id' 
      });
    }
    
    // Create a PDF document
    const doc = new PDFDocument({
      size: 'A4',
      margin: 50,
      info: {
        Title: 'Barcode Document',
        Author: 'File Manipulator Extension'
      }
    });
    
    // Set response headers for PDF download
    const pdfFilename = `${filename || 'barcodes'}.pdf`;
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=${pdfFilename}`);
    
    // Pipe PDF to response
    doc.pipe(res);
    
    // Create document header
    doc.fontSize(24).text('Barcodes', { align: 'center' });
    doc.fontSize(12).text(`Original Filename: ${filename || 'Not provided'}`, { align: 'center' });
    doc.fontSize(12).text(`Generated on: ${new Date().toLocaleString()}`, { align: 'center' });
    doc.moveDown(2);
    
    // Generate barcode SVGs
    const barcodeData = [
      { label: 'Receipt ID', value: data.receipt_id },
      { label: 'Consignment ID', value: data.consignment_id },
      { label: 'Box ID', value: data.box_id }
    ];
    
    // Set up DOM implementation for Node.js environment
    const xmlSerializer = new XMLSerializer();
    const domImpl = new DOMImplementation();
    
    // Process each barcode
    for (const item of barcodeData) {
      if (item.value) {
        // Create label
        doc.fontSize(14).text(`${item.label}:`, { continued: false });
        
        // Create an SVG document with domImpl
        // Use 'http://www.w3.org/2000/svg' as namespace to avoid duplicate xmlns
        const svgDoc = domImpl.createDocument('http://www.w3.org/2000/svg', 'svg', null);
        const svgNode = svgDoc.documentElement;
        
        // Set SVG attributes - don't set xmlns as it's already defined by createDocument
        svgNode.setAttribute('width', '300');
        svgNode.setAttribute('height', '100');
        
        // Generate the barcode manually
        const barcodeData = generateCode128(item.value);
        const barcodeWidth = 2;
        const barcodeHeight = 80;
        const marginLeft = 10;
        let currentX = marginLeft;
        
        // Create the bars
        for (const bar of barcodeData) {
          if (bar) {
            // Create a black bar
            const rect = svgDoc.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('x', currentX);
            rect.setAttribute('y', 10);
            rect.setAttribute('width', barcodeWidth);
            rect.setAttribute('height', barcodeHeight);
            rect.setAttribute('fill', '#000');
            svgNode.appendChild(rect);
          }
          currentX += barcodeWidth;
        }
        
        // Convert SVG node to string
        const svgString = xmlSerializer.serializeToString(svgNode);
        
        // Add SVG to PDF - center horizontally
        const startX = (doc.page.width - 300) / 2;
        SVGtoPDF(doc, svgString, startX, doc.y, { width: 300 });
        
        // Add value text below barcode
        doc.moveDown(0.5);
        doc.fontSize(12).text(item.value, { align: 'center' });
        doc.moveDown(2);
      }
    }
    
    // Add footer
    doc.fontSize(10).text('Generated by File Manipulator Extension', {
      align: 'center',
      color: '#666666'
    });
    
    // Finalize PDF
    doc.end();
    
  } catch (error) {
    console.error('Error generating barcode PDF:', error);
    
    // If headers were not sent yet, return error as JSON
    if (!res.headersSent) {
      return res.status(500).json({
        success: false,
        error: error.message || 'Error generating barcode PDF'
      });
    }
  }
};

/**
 * Simple implementation of Code128 encoding for barcodes
 * This is a simplified version that generates a pattern of bars
 * @param {string} text - The text to encode
 * @returns {boolean[]} - Array of bars (true=black, false=white)
 */
function generateCode128(text) {
  // This is a simplified implementation
  // In a real app, you would use a proper algorithmic implementation of Code128
  
  // Start with Code128 start character (pattern varies based on character set)
  let pattern = [true, true, false, true, false, false, true, true, false, false, true];
  
  // For simplicity, we'll just create a pattern based on the ASCII values
  for (let i = 0; i < text.length; i++) {
    const charCode = text.charCodeAt(i);
    
    // Generate a simple pattern based on the character code
    // This is NOT a proper Code128 implementation, just for visual demo
    for (let j = 0; j < 6; j++) {
      // Alternate based on bit pattern of ASCII code
      pattern.push(Boolean((charCode >> j) & 1));
      pattern.push(false); // Add white space between bars
    }
  }
  
  // Add stop character
  pattern = pattern.concat([true, true, false, false, true, false, true, true, false, true, true, true]);
  
  return pattern;
} 