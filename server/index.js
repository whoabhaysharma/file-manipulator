const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { createCanvas } = require('canvas');
const JsBarcode = require('jsbarcode');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Temporary directory for PDF files
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

// Clean temp files periodically (every hour)
setInterval(() => {
  const files = fs.readdirSync(tempDir);
  const now = Date.now();
  files.forEach(file => {
    const filePath = path.join(tempDir, file);
    const stats = fs.statSync(filePath);
    // Delete files older than 1 hour
    if (now - stats.mtime.getTime() > 60 * 60 * 1000) {
      fs.unlinkSync(filePath);
    }
  });
}, 60 * 60 * 1000);

/**
 * API endpoint to generate barcode PDF
 * Expects JSON with receipt_id, consignment_id, box_id and filename
 */
app.post('/api/generate-barcode', async (req, res) => {
  try {
    const { receipt_id, consignment_id, box_id, filename = 'barcode' } = req.body;
    
    console.log(req.body);
    if (!receipt_id && !consignment_id && !box_id) {
      return res.status(400).json({ error: 'At least one barcode ID is required' });
    }

    // Create PDF
    const pdfPath = await generateBarcodePDF({
      receipt_id,
      consignment_id,
      box_id
    }, filename);

    // Send file for download
    res.download(pdfPath, `${filename}-barcodes.pdf`, (err) => {
      if (err) {
        console.error('Error sending file:', err);
      }
      
      // Delete file after sending (or on error)
      try {
        fs.unlinkSync(pdfPath);
      } catch (unlinkErr) {
        console.error('Error removing temp file:', unlinkErr);
      }
    });
  } catch (error) {
    console.error('Error generating barcode PDF:', error);
    res.status(500).json({ error: 'Failed to generate barcode PDF' });
  }
});

/**
 * Generate a PDF with barcodes
 * @param {Object} data - Data containing IDs
 * @param {string} filename - Base filename
 * @returns {Promise<string>} - Path to the generated PDF file
 */
async function generateBarcodePDF(data, filename) {
  return new Promise((resolve, reject) => {
    try {
      // Create unique filename
      const pdfFilename = `${filename}-${uuidv4()}.pdf`;
      const pdfPath = path.join(tempDir, pdfFilename);
      
      // Create PDF document
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50
      });
      
      // Pipe output to file
      const stream = fs.createWriteStream(pdfPath);
      doc.pipe(stream);
      
      // Add header
      doc.font('Helvetica-Bold')
         .fontSize(24)
         .text('Barcodes', { align: 'center' });
      
      doc.font('Helvetica')
         .fontSize(12)
         .text(`Filename: ${filename}`, { align: 'center' })
         .text(`Date: ${new Date().toLocaleString()}`, { align: 'center' })
         .moveDown(2);

      // Add barcodes
      let yPosition = doc.y;
      
      // Generate each barcode
      const barcodeData = [
        { label: 'Receipt ID', value: data.receipt_id },
        { label: 'Consignment ID', value: data.consignment_id },
        { label: 'Box ID', value: data.box_id }
      ];
      
      barcodeData.forEach((item) => {
        if (item.value) {
          // Add label
          doc.font('Helvetica-Bold')
             .fontSize(14)
             .text(item.label, { align: 'center' });
             
          // Generate barcode
          const canvas = createCanvas(400, 100);
          JsBarcode(canvas, item.value, {
            format: "CODE128",
            lineColor: "#000",
            width: 2,
            height: 80,
            displayValue: false,
            margin: 10
          });
          
          // Add barcode image
          doc.image(canvas.toBuffer(), {
            fit: [400, 100],
            align: 'center'
          });
          
          // Add value text
          doc.font('Helvetica')
             .fontSize(12)
             .text(item.value, { align: 'center' })
             .moveDown(2);
        }
      });
      
      // Add footer
      doc.fontSize(10)
         .text('Generated by File Manipulator Extension', {
           align: 'center',
           bottom: 30
         });
         
      // Finalize PDF
      doc.end();
      
      stream.on('finish', () => {
        resolve(pdfPath);
      });
      
      stream.on('error', (err) => {
        reject(err);
      });
    } catch (error) {
      reject(error);
    }
  });
}

// Start server
app.listen(PORT, () => {
  console.log(`Barcode server running on port ${PORT}`);
});

module.exports = app; // For testing 